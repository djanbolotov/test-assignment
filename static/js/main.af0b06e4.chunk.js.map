{"version":3,"sources":["store/types/posts.ts","hooks/useTypedSelector.ts","store/actions/posts.ts","utils/Card.ts","components/Card.tsx","components/Posts.tsx","utils/Navbar.ts","components/NavBar.tsx","utils/Form.ts","utils/PostID.ts","components/Form.tsx","components/New.tsx","components/PostID.tsx","components/PreLoader.tsx","App.tsx","store/reducers/posts.ts","store/index.ts","index.tsx"],"names":["PostsActionTypes","useTypedSelector","useSelector","point","fetchPosts","dispatch","a","type","FETCH_POSTS","axios","get","responce","FETCH_POSTS_SUCCESS","payload","data","FETCH_POSTS_ERROR","Container","styled","div","Body","Title","h1","Text","p","Button","button","Card","post","history","useHistory","title","body","onClick","id","push","Parentcard","Posts","posts","state","useDispatch","useEffect","map","i","MenuLink","span","Nav","Logo","Menu","Navbar","to","Input","input","attrs","props","size","Form","text","withComment","useState","currentPost","setCurrentPost","comment","setComment","sendPost","POST","POST_SUCCESS","POST_ERROR","newPost","updateCurrentPost","put","updatePost","createNewComment","createComment","value","onChange","e","target","placeholder","postId","New","PostID","postID","useParams","deletePostID","delete","parseInt","GET_POST_SUCCESS","comments","PreLoader","className","App","loading","set","NavBar","path","component","exact","initialState","error","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af0b06e4.chunk.js","sourcesContent":["export interface PostState {\r\n    posts: Post[];\r\n    loading: boolean;\r\n    error: null | string;\r\n    post: Post | null;\r\n}\r\n\r\nexport interface NewPost {\r\n    title: string;\r\n    body: string;\r\n}\r\n\r\nexport interface Post {\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n    comments?: Comment[];\r\n}\r\n\r\ninterface Comment {\r\n    id: number;\r\n    postID: number;\r\n    body: string;\r\n}\r\n\r\nexport enum PostsActionTypes {\r\n    FETCH_POSTS = \"FETCH_POSTS\",\r\n    FETCH_POSTS_SUCCESS = \"FETCH_POSTS_SUCCESS\",\r\n    FETCH_POSTS_ERROR = \"FETCH_POSTS_ERROR\",\r\n    POST = \"NEW_POST\",\r\n    POST_SUCCESS = \"NEW_POST_SUCCESS\",\r\n    POST_ERROR = \"NEW_POST_ERROR\",\r\n    GET_POST_SUCCESS = \"GET_POST_SUCCESS\"\r\n}\r\ninterface FetchPostsAction {\r\n    type: PostsActionTypes.FETCH_POSTS;\r\n}\r\n\r\ninterface FetchPostsSuccessAction {\r\n    type: PostsActionTypes.FETCH_POSTS_SUCCESS;\r\n    payload: Post[];\r\n}\r\n\r\ninterface FetchPostsErrorAction {\r\n    type: PostsActionTypes.FETCH_POSTS_ERROR;\r\n    payload: string;\r\n}\r\n\r\ninterface NewPostAction {\r\n    type: PostsActionTypes.POST;\r\n}\r\n\r\ninterface NewPostSuccessAction {\r\n    type: PostsActionTypes.POST_SUCCESS;\r\n}\r\n\r\ninterface NewPostErrorAction {\r\n    type: PostsActionTypes.POST_ERROR;\r\n    payload: string;\r\n}  \r\n\r\ninterface GetPostSuccess {\r\n    type: PostsActionTypes.GET_POST_SUCCESS;\r\n    payload: Post\r\n}\r\n\r\nexport type PostAction = FetchPostsAction | FetchPostsErrorAction | FetchPostsSuccessAction \r\nexport type NewPostActions = GetPostSuccess | NewPostAction | NewPostErrorAction | NewPostSuccessAction ","import { RootState } from './../store/index';\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import axios from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport { NewPost, NewPostActions, PostAction, PostsActionTypes } from \"../types/posts\"\r\nconst point = \"https://simple-blog-api.crew.red/posts/\"\r\n\r\nexport const fetchPosts = () => {\r\n    return async (dispatch: Dispatch<PostAction>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.FETCH_POSTS})\r\n            const responce = await axios.get(point)\r\n            dispatch({type: PostsActionTypes.FETCH_POSTS_SUCCESS, payload: responce.data})\r\n        }catch (e) {\r\n            dispatch({\r\n                type: PostsActionTypes.FETCH_POSTS_ERROR, \r\n                payload: \"An error has occurred!\"})\r\n        }\r\n    }\r\n}\r\n\r\nexport const newPost = (data: NewPost) => {\r\n    return async (dispatch: Dispatch<NewPostActions>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.POST})\r\n            await axios.post(point, data)\r\n            dispatch({type: PostsActionTypes.POST_SUCCESS})\r\n        }catch (e){\r\n            dispatch({\r\n                type: PostsActionTypes.POST_ERROR,\r\n                payload: \"There was a some error with posting:(\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletePost = (id: number) => {\r\n    return async (dispatch: Dispatch<NewPostActions>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.POST})\r\n            await axios.delete(point + id)\r\n            dispatch({type: PostsActionTypes.POST_SUCCESS})\r\n        }catch (e){\r\n            dispatch({\r\n                type: PostsActionTypes.POST_ERROR,\r\n                payload: \"There was a some error with deleting:(\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatePost = (id: number, data: NewPost) => {\r\n    return async (dispatch: Dispatch<NewPostActions>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.POST})\r\n            await axios.put(point + id, data)            \r\n            dispatch({type: PostsActionTypes.POST_SUCCESS})\r\n        }catch (e){\r\n           dispatch({ \r\n                type: PostsActionTypes.POST_ERROR,\r\n                payload: \"There was a some error with updating post :(\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const getPost = (id: number) => {\r\n    return async (dispatch: Dispatch<NewPostActions>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.POST})\r\n            const responce = await axios.get(point + id + \"?_embed=comments\")\r\n            dispatch({type: PostsActionTypes.GET_POST_SUCCESS, payload: responce.data})\r\n        }catch (e){\r\n            dispatch({\r\n                type: PostsActionTypes.POST_ERROR,\r\n                payload: \"There was an error with server :(\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const createComment = (data: Comment) => {\r\n    return async (dispatch: Dispatch<NewPostActions>) => {\r\n        try{\r\n            dispatch({type: PostsActionTypes.POST})\r\n            await axios.post(\"https://simple-blog-api.crew.red/comments\", data)\r\n            dispatch({type: PostsActionTypes.POST_SUCCESS})\r\n        }catch (e){\r\n            dispatch({\r\n                type: PostsActionTypes.POST_ERROR,\r\n                payload: \"There was an error with posting comment :(\"\r\n            })\r\n        }\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 250px;\r\n  height: 230px;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: border-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 1 auto;\r\n  min-height: 1px;\r\n  padding: 1.25rem;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  max-height: 30px;\r\n  overflow: hidden;\r\n\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  line-height: 25px;\r\n  color: #6c757d;\r\n  max-height: 100px;\r\n  overflow: hidden;\r\n  margin:0;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  cursor: pointer;\r\n  margin-top: auto;\r\n  width: 100%;\r\n  color: #fff;\r\n  background-color: #7b7fda;\r\n  border-color: #28a745;\r\n  display: block;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  user-select: none;\r\n  border: 1px solid transparent;\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem; \r\n  line-height: 1.5;\r\n  border-radius: 0.25rem;\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\r\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n  &:hover {\r\n    color: #fff;\r\n    background-color: #67bc98;\r\n    border-color: #1e7e34;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Container, Body, Title, Text, Button } from './../utils/Card';\r\nimport {Post} from './../store/types/posts'\r\nimport { useHistory } from 'react-router';\r\n\r\ntype Props = {\r\n    post: Post\r\n}\r\n\r\nexport const Card: React.FC<Props> = ({post}) => {\r\n  const history = useHistory()\r\n  const toPost = (id: number) => {\r\n    history.push(\"/posts/\" + id)\r\n  }\r\n  return (\r\n    <Container>\r\n      <Body>\r\n          <Title>{post.title}</Title>\r\n          <Text>{post.body}</Text>\r\n          <Button onClick={() => toPost(post.id)}>Learn more</Button>\r\n      </Body>\r\n    </Container>\r\n  );\r\n}","import React, { useEffect } from \"react\"\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\"\r\nimport { fetchPosts } from \"../store/actions/posts\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport styled from \"styled-components\"\r\nimport { Card } from \"./Card\"\r\n\r\nconst Posts: React.FC = () => {\r\n    const {posts} = useTypedSelector(state => state.posts)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n       dispatch(fetchPosts())\r\n    }, [dispatch])\r\n    \r\n    return (\r\n        <Parentcard>\r\n            {posts.map(i => \r\n                <Card key={i.id} post={i}/>\r\n            )}\r\n        </Parentcard>\r\n    )\r\n}\r\n\r\nexport const Parentcard = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-around;\r\n    position: relative;\r\n    top: 8rem;\r\n    width: 90%;\r\n    padding: 0;\r\n    margin: auto;\r\n`\r\nexport default Posts;","import styled from \"styled-components\";\r\n\r\nexport const MenuLink = styled.span`\r\n  padding: 1rem 2rem;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  color: white;\r\n  transition: all 0.3s ease-in;\r\n  font-size: 1.1rem;\r\n  &:hover {\r\n    color: #67bc98;\r\n  }\r\n`;\r\n\r\nexport const Nav = styled.div`\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background: #7b7fda;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\nexport const Logo = styled.span`\r\n  padding: 1rem 0;\r\n  color:  #67bc98;\r\n  font-weight: 800;\r\n  font-size: 1.7rem;\r\n  span {\r\n    font-weight: 300;\r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const Menu = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: relative;\r\n`;","import React from 'react'\r\nimport {Nav, Logo, Menu, MenuLink} from \"./../utils/Navbar\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = () => {\r\n\r\n\r\n  return (\r\n    <Nav>\r\n      <Logo>\r\n        <Link to=\"/\">Djan<span>bolotov</span></Link>\r\n      </Logo>\r\n      <Menu>\r\n        <MenuLink><Link to=\"/\">All Posts</Link></MenuLink>\r\n        <MenuLink><Link to=\"/posts/new\">New Post</Link></MenuLink>\r\n      </Menu>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input.attrs(props => ({\r\n    type: \"text\",\r\n      size: props.size || \"1em\",\r\n  }))`\r\n    font-size: 1em;\r\n    border: 2px solid blue;\r\n    border-radius: 3px;\r\n    margin: 10px;\r\n    padding: ${props => props.size};\r\n  `;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 40%;\r\n  word-wrap: break-word;\r\n  background-color: #fff;\r\n  background-clip: border-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  overflow: hidden;\r\n`\r\nexport const Title = styled.h1`\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  max-height: 300px;\r\n  overflow: hidden;\r\n\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  line-height: 25px;\r\n  color: #6c757d;\r\n  max-height: 900px;\r\n  overflow: hidden;\r\n  margin:0;\r\n`;","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { createComment, fetchPosts, newPost, updatePost } from '../store/actions/posts'\r\nimport { Post } from '../store/types/posts'\r\nimport { Button } from '../utils/Card'\r\nimport { Input } from '../utils/Form'\r\nimport { Container } from '../utils/PostID'\r\n\r\ntype Props = {\r\n    text: string,\r\n    withComment: boolean,\r\n    post?: Post | null,\r\n    id: number\r\n}\r\nconst Form: React.FC<Props> = ({text, withComment, post, id = 1}) => {\r\n    const history = useHistory()\r\n    const [currentPost, setCurrentPost] = useState({\r\n        title: '',\r\n        body: ''\r\n    });\r\n    const [comment, setComment] = useState({});\r\n    const dispatch = useDispatch()\r\n\r\n    const Title = (value: string) => {\r\n        setCurrentPost({\r\n            ...currentPost,\r\n            title: value\r\n        })\r\n    }\r\n\r\n    const Body = (value: string) => {\r\n        setCurrentPost({\r\n            ...currentPost,\r\n            body: value\r\n        })\r\n    }\r\n\r\n    const Comment = (value: string) =>{\r\n        setComment({\r\n            ...comment,\r\n            body: value,\r\n            postId: id\r\n        })\r\n    }\r\n\r\n    const sendPost = (data: any) =>{\r\n        dispatch(newPost(data))\r\n        dispatch(fetchPosts())\r\n        history.push(\"/\")\r\n    }\r\n     \r\n    const updateCurrentPost = (id: number, data: any) =>{\r\n        dispatch(updatePost(id, data))\r\n        dispatch(fetchPosts())\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const createNewComment = (data: any) => {\r\n        dispatch(createComment(data))\r\n        dispatch(fetchPosts())\r\n        history.push(\"/\")\r\n    }\r\n    useEffect(()=>{\r\n        if(post)\r\n        {\r\n            setCurrentPost(post)\r\n        }\r\n    },[post])    \r\n    \r\n    return (\r\n        <Container>\r\n            <Input value={currentPost.title} onChange={(e: any) => Title(e.target.value)} placeholder=\"Title...\"/>\r\n            <Input value={currentPost.body} onChange={(e: any) => Body(e.target.value)} placeholder=\"Body...\" size=\"2em\"/>\r\n            <Button onClick={withComment? () => updateCurrentPost(id, currentPost) :  () => sendPost(currentPost)}>{text}</Button>\r\n            {withComment && \r\n            <div>\r\n                <h3>Comment</h3>\r\n                <Input onChange={(e: any) => Comment(e.target.value)} placeholder=\"Comment body...\" size=\"2em\"/>\r\n                <Button onClick={() => createNewComment(comment)}>New comment</Button>\r\n            </div> }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport { Parentcard } from \"./Posts\";\r\n\r\n\r\nconst New: React.FC = () =>{\r\n  const title = \"New Post\"\r\n  const bool = false\r\n  return (\r\n    <>\r\n    <Parentcard>\r\n      <Form id={1} withComment={bool} text={title}/>\r\n    </Parentcard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default New;","import React, { useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\r\nimport { getPost, deletePost, fetchPosts } from \"../store/actions/posts\";\r\nimport { Container, Title, Text } from '../utils/PostID';\r\nimport { Body, Button } from '../utils/Card';\r\nimport { Parentcard } from './Posts';\r\nimport  Form  from './Form';\r\n\r\n\r\nconst PostID: React.FC = () => {\r\n    const text = \"Edit\";\r\n    const bool = true;\r\n    const {postID} = useParams<{postID: string}>()\r\n    const post = useTypedSelector(state => state.posts.post)\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const deletePostID = (postID: number) => {\r\n        dispatch(deletePost(postID))\r\n        dispatch(fetchPosts())\r\n        history.push(\"/\")\r\n    }\r\n  \r\n    useEffect(() => {\r\n        dispatch(getPost(parseInt(postID)))\r\n    }, [dispatch, postID])\r\n    \r\n    return (\r\n        <Parentcard>\r\n            <Container>\r\n            <Body>\r\n                <Title>{post?.title}</Title>\r\n                <Text>{post?.body}</Text>\r\n                {post?.comments && <h3>Comments</h3>}\r\n                {post?.comments?.map(i => {\r\n                    return <Text key={i.id}>{i?.body}</Text>\r\n                })}\r\n                <Button onClick={() => deletePostID(parseInt(postID))}>Delete</Button>\r\n            </Body>\r\n            </Container>\r\n            <Form id={parseInt(postID)} post={post} withComment={bool} text = {text}/>\r\n        </Parentcard>\r\n    )\r\n}\r\n\r\nexport default PostID;","import React from 'react'\r\nimport \"./PreLoader.css\"\r\n\r\nexport default function PreLoader() {\r\n    return (\r\n        <div className='loader-wrap'>\r\n            <div className='loader'>\r\n                <div className='box-1 box'></div>\r\n                <div className='box-2 box'></div>\r\n                <div className='box-3 box'></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Posts from \"./components/Posts\";\nimport NavBar  from \"./components/NavBar\";\nimport New from \"./components/New\";\nimport PostID from \"./components/PostID\";\nimport { useTypedSelector } from \"./hooks/useTypedSelector\";\nimport PreLoader from \"./components/PreLoader\";\n\nexport const App: React.FC = () =>{\n  const {loading} = useTypedSelector(set => set.posts)\n  \n  return (\n    <Router>\n      <NavBar/>\n      <Switch>\n        <Route path=\"/\" component={Posts}/>\n        <Route path=\"/posts/new\" exact component={New}/>\n        <Route path=\"/posts/:postID\" exact component={PostID}/>\n      </Switch>\n      {loading && <PreLoader/>}\n    </Router>\n  )\n}","import {PostState, PostAction, PostsActionTypes, NewPostActions} from './../types/posts'\r\nconst initialState: PostState = {\r\n    posts: [],\r\n    loading: false,\r\n    error: null,\r\n    post: null,\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action: PostAction | NewPostActions): PostState => {\r\n    switch (action.type){\r\n        case PostsActionTypes.FETCH_POSTS:\r\n            return {...state, loading: true, error: null}\r\n        case PostsActionTypes.FETCH_POSTS_SUCCESS:\r\n            return {...state, loading: false, error: null, posts: action.payload}\r\n        case PostsActionTypes.FETCH_POSTS_ERROR:\r\n            return {...state, loading: false, error: action.payload}\r\n        case PostsActionTypes.POST:\r\n            return {...state, loading: true, error: null}\r\n        case PostsActionTypes.POST_SUCCESS:\r\n            return {...state, loading: false, error: null}\r\n        case PostsActionTypes.POST_ERROR:\r\n            return {...state, loading: false, error: action.payload}\r\n        case PostsActionTypes.GET_POST_SUCCESS:\r\n            return {...state, loading: false, error: null, post: action.payload}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { postsReducer } from './reducers/posts';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport { Provider } from 'react-redux';\nimport {store} from './store';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}